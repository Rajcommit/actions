## using created actions in workflow
## https://notes.kodekloud.com/docs/GitHub-Actions-Certification/Custom-Actions/Metadata-syntax-for-GitHub-Actions
## https://docs.github.com/en/actions/reference/workflows-and-actions/metadata-syntax
## https://github.blog/changelog/2024-04-16-deprecation-notice-v3-of-the-artifact-actions/
name: Deployment
on:
  push:
    branches:
      - master
jobs:
  lint:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Load and cache dependencies
        id: cache-deps
        uses: ./.github/actions/cached-deps ## relevent to root folder of the repo
        # or if you want to use it from an existing repo, you can use the following
        ##uses: accountname/reponame  (format incase of using it from exsisting repo)
        with:
          caching: false ## if you want to disable caching, you can set it to true
      - name: Output inforamtion
        run: echo "Cache use status ${{ steps.cache-deps.outputs.cache }}"
      - name: Debug files in current directory
        run: ls -la
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Load and cache dependencies
        uses: ./.github/actions/cached-deps ## relevent to root folder of the repo
      - name: Test code
        id: run-tests
        run: npm run test
      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: ./dist
      - name: Output contents
        run: ls
      - name: Deploy site
        id: deploy
        ## using custom action to deploy to AWS S3 bucket
        ## we can use actions which are precreated here || https://github.blog/changelog/2024-04-16-deprecation-notice-v3-of-the-artifact-actions/
        ## or if you want to use it from an existing repo, you can use the following
        ## uses: accountname/reponame  (format incase of using it from exsisting repo)
        ## or if you want to use it from a local folder, you can use the following
        ## uses: ./.github/deploy-s3-javascript  (format incase of using it from local folder)  ## relevent to root folder of the repo
        uses: ./.github/actions/deploy-s3-docker ## relevent to root folder of the repo
        env: ## Can be used only by this step
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          bucket: my-s3-bucket-name
          region: us-east-1
          sourceDir: ./dist
      - name: Output website URL
        run: |
          echo "Website URL: ${{ steps.deploy.outputs.website-url }}"  # Output the website URL from the deploy step
          echo "Website URL: ${{ steps.deploy.outputs.website-url }}" >> "$GITHUB_OUTPUT"  # Set the output variable for use in subsequent steps or workflows
  #Information:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Get code
  #      uses: actions/checkout@v4
  #    - name: Run customaction
  #      uses: ./.github/deploy-s3-docker ## relevent to root folder of the repo
  #      # or if you want to use it from an existing repo, you can use the following
  #      ##uses: accountname/reponame  (format incase of using it from exsisting repo)
  #      with:
  #        bucket: my-s3-bucket-name
  #        region: us-east-1
  #        accessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        secretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        sourceDir: ./dist
  #    - name: Output website URL
  #      run: |
  #        echo "Website URL: ${{ steps.deploy.outputs.websiteUrl }}"  # Output the website URL from the deploy step
  #        echo "Website URL: ${{ steps.deploy.outputs.websiteUrl }}" >> "$GITHUB_OUTPUT"  # Set the output variable for use in subsequent steps or workflows
